<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- singleton으로 HikariCP올리기 -->

	<bean id="HikariCP" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@106.243.194.229:9999:xe"></property>
		<property name="username" value="INNEW"></property>
		<property name="password" value="1234"></property>

	</bean>

	<!-- Datasource 바라보기 -->
	<bean id="datasource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="HikariCP"></constructor-arg>
	</bean>

	<!-- mybatis dbcp연결 -->
	<bean id="mybatisdb"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource"></property>

		<!-- <property name="configLocation" value="classpath:/mybatis-config.xml" 
			/> -->
	</bean>

	<!-- 자동 open ,close하려고 사용 -->
	<bean id="dbSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="mybatisdb" />
	</bean>

<!-- transaction을 처리해주려고 사용 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"/>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/>
	
<bean id="javaMail" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
   <property name="host" value= "smtp.naver.com"></property>
   <property name="port" value= "465"></property>
   <property name="username" value= "i_innew0731"></property>
   <property name="password" value= "dlsdbwjd92^^"></property>
   <property name="defaultEncoding" value= "utf-8"></property>
   <property name="javaMailProperties">
         <props>
             <prop key="mail.debug">true</prop>
             <prop key="mail.smtp.starttls.enable">true</prop>
             <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
             <prop key="mail.smtp.ssl.checkserveridentity">true</prop>
             <prop key="mail.smtp.auth">true</prop>
             <prop key="mail.smtps.ssl.trust">*</prop>
             <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
         </props>
         </property>
   </bean>
   
   <!-- multipart 파일업로드/ commons-fileupload를 통해 서버로 보내주면 파일을 받는 녀석-->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 <property name="maxUploadSize" value="1000000"/>    <!--   10mb 최대로 전송할수 있는 파일의 크기  -->
	  <property name ="maxInMemorySize" value="5000000"/> <!-- 파일을 받는 서버 메모리의 사이즈  -->
	 <!--  <property name ="uploadTempDir" value="" />   서버의 특정영역에 저장한다. 잘사용하지않음. 자동이지만 잘사용하지않는 이유는 각각 파일이 저장되는 곳이 달라야 편하기 때문에 서비스에 따라서 저장되는 위치가 달라야한다.-->
   </bean>   
   
	<!--  <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->


</beans>
